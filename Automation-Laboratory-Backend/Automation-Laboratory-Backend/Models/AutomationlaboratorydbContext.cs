// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Metadata;

#nullable disable

namespace Automation_Laboratory_Backend.Models
{
    public partial class AutomationlaboratorydbContext : DbContext
    {
        public AutomationlaboratorydbContext()
        {
        }

        public AutomationlaboratorydbContext(DbContextOptions<AutomationlaboratorydbContext> options)
            : base(options)
        {
        }

        public virtual DbSet<Device> Devices { get; set; }
        public virtual DbSet<History> Histories { get; set; }
        public virtual DbSet<Module> Modules { get; set; }
        public virtual DbSet<Workplace> Workplaces { get; set; }

        protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
        {
            if (!optionsBuilder.IsConfigured)
            {
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
                optionsBuilder.UseSqlServer("Data Source=LAPTOP-LAGVCFF9\\SQLEXPRESS;Initial Catalog=AutomationLaboratoryDB;Integrated Security=True");
            }
        }

        protected override void OnModelCreating(ModelBuilder modelBuilder)
        {
            modelBuilder.Entity<Device>(entity =>
            {
                entity.HasOne(d => d.Workplace)
                    .WithMany(p => p.Devices)
                    .HasForeignKey(d => d.WorkplaceId)
                    .HasConstraintName("FK_Device_Workplace");
            });

            modelBuilder.Entity<History>(entity =>
            {
                entity.Property(e => e.Time)
                    .IsRowVersion()
                    .IsConcurrencyToken();
            });

            modelBuilder.Entity<Module>(entity =>
            {
                entity.HasOne(d => d.Device)
                    .WithMany(p => p.Modules)
                    .HasForeignKey(d => d.DeviceId)
                    .HasConstraintName("FK_Module_Device");
            });

            OnModelCreatingPartial(modelBuilder);
        }

        partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
    }
}